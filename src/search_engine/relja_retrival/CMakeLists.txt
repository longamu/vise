############################## MPI settings
message("=========================== MPI: ON")
ADD_DEFINITIONS(-DRR_MPI)
set( REQURE_BOOST_MPI "mpi" )
find_package(MPI REQUIRED)
include_directories(${MPI_INCLUDE_PATH})

message("=========================== Registration: ON")
ADD_DEFINITIONS(-DRR_REGISTER)


############################## Magick++
include_directories( ${ImageMagick_INCLUDE_DIRS} )
ADD_DEFINITIONS(-DRR_MAGICK)


############################## autogenerated files
set( cREGISTER 1 )
#set( RR_REGISTER_PY "True")
#set( RR_SEND_COMMENTS_PY "False" )
#set( RR_AUTO_EMAIL_PASS_PY "replacethis" )
#CONFIGURE_FILE( ${CMAKE_SOURCE_DIR}/src/search_engine/relja_retrival/src/ui/web/webserver.cmake.py ${CMAKE_SOURCE_DIR}/ui/web/webserver.py )
#CONFIGURE_FILE( ${CMAKE_SOURCE_DIR}/src/search_engine/relja_retrival/src/ui/web/send_comments.cmake.py ${CMAKE_SOURCE_DIR}/ui/web/send_comments.py )

############################## Normal stuff


# Change this to OFF to build binaries for redistribution
set( BUILD_SHARED_LIBS "ON" )
# set( BUILD_SHARED_LIBS "OFF" )

set( CMAKE_CXX_FLAGS "-Wall -DEIGEN_NO_DEBUG -O2 -g3 -msse2 -mpopcnt")

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER "4.7.1")
    # -Wno-unused-local-typedefs is just for EIGEN and more recent g++
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-local-typedefs")
  endif()
endif()

# set( CMAKE_CXX_FLAGS "-Wall -Wno-unused-local-typedefs -DEIGEN_NO_DEBUG -O0 -g3")

set(CMAKE_INCLUDE_CURRENT_DIR ON)

include_directories( api )
include_directories( compression )
include_directories( external )
include_directories( external/KMCode_relja/exec/detect_points )
include_directories( external/KMCode_relja/exec/compute_descriptors )
include_directories( preprocessing )
include_directories( indexing )
include_directories( matching )
include_directories( matching/det_ransac )
include_directories( matching/registration )
include_directories( nn )
include_directories( represent )
include_directories( retrieval )
include_directories( util )
include_directories( v2/dataset )
include_directories( v2/embedding )
include_directories( v2/evaluation )
include_directories( v2/indexing )
include_directories( v2/indexing/train )
include_directories( v2/retrieval )

# for protobufs
# protobuf compiles *.pb.cc and *.pb.h headers in the cmake build tree
# therefore, we need to include the corresponding folders in the build tree
include_directories( ${CMAKE_BINARY_DIR}/src/search_engine/relja_retrival/util )
include_directories( ${CMAKE_BINARY_DIR}/src/search_engine/relja_retrival/v2/dataset )
include_directories( ${CMAKE_BINARY_DIR}/src/search_engine/relja_retrival/v2/embedding )
include_directories( ${CMAKE_BINARY_DIR}/src/search_engine/relja_retrival/v2/evaluation )
include_directories( ${CMAKE_BINARY_DIR}/src/search_engine/relja_retrival/v2/indexing )
include_directories( ${CMAKE_BINARY_DIR}/src/search_engine/relja_retrival/v2/retrieval )

add_subdirectory( api )
add_subdirectory( compression )
add_subdirectory( external )
add_subdirectory( indexing )
add_subdirectory( matching )
add_subdirectory( nn )
add_subdirectory( preprocessing )
add_subdirectory( represent )
add_subdirectory( retrieval )
add_subdirectory( util )
add_subdirectory( v2 )

