// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: index_entry.proto

#ifndef PROTOBUF_index_5fentry_2eproto__INCLUDED
#define PROTOBUF_index_5fentry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rr {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_index_5fentry_2eproto();
void protobuf_AssignDesc_index_5fentry_2eproto();
void protobuf_ShutdownFile_index_5fentry_2eproto();

class indexEntry;

// ===================================================================

class indexEntry : public ::google::protobuf::Message {
 public:
  indexEntry();
  virtual ~indexEntry();

  indexEntry(const indexEntry& from);

  inline indexEntry& operator=(const indexEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const indexEntry& default_instance();

  void Swap(indexEntry* other);

  // implements Message ----------------------------------------------

  indexEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const indexEntry& from);
  void MergeFrom(const indexEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 id = 1 [packed = true];
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();

  // repeated uint32 diffid = 2 [packed = true];
  inline int diffid_size() const;
  inline void clear_diffid();
  static const int kDiffidFieldNumber = 2;
  inline ::google::protobuf::uint32 diffid(int index) const;
  inline void set_diffid(int index, ::google::protobuf::uint32 value);
  inline void add_diffid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      diffid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_diffid();

  // repeated float x = 3 [packed = true];
  inline int x_size() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline float x(int index) const;
  inline void set_x(int index, float value);
  inline void add_x(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      x() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_x();

  // repeated float y = 4 [packed = true];
  inline int y_size() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline float y(int index) const;
  inline void set_y(int index, float value);
  inline void add_y(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      y() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_y();

  // repeated float a = 5 [packed = true];
  inline int a_size() const;
  inline void clear_a();
  static const int kAFieldNumber = 5;
  inline float a(int index) const;
  inline void set_a(int index, float value);
  inline void add_a(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      a() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_a();

  // repeated float b = 6 [packed = true];
  inline int b_size() const;
  inline void clear_b();
  static const int kBFieldNumber = 6;
  inline float b(int index) const;
  inline void set_b(int index, float value);
  inline void add_b(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      b() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_b();

  // repeated float c = 7 [packed = true];
  inline int c_size() const;
  inline void clear_c();
  static const int kCFieldNumber = 7;
  inline float c(int index) const;
  inline void set_c(int index, float value);
  inline void add_c(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      c() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_c();

  // repeated uint32 qx = 8 [packed = true];
  inline int qx_size() const;
  inline void clear_qx();
  static const int kQxFieldNumber = 8;
  inline ::google::protobuf::uint32 qx(int index) const;
  inline void set_qx(int index, ::google::protobuf::uint32 value);
  inline void add_qx(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      qx() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_qx();

  // repeated uint32 qy = 9 [packed = true];
  inline int qy_size() const;
  inline void clear_qy();
  static const int kQyFieldNumber = 9;
  inline ::google::protobuf::uint32 qy(int index) const;
  inline void set_qy(int index, ::google::protobuf::uint32 value);
  inline void add_qy(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      qy() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_qy();

  // optional bytes qel_scale = 10;
  inline bool has_qel_scale() const;
  inline void clear_qel_scale();
  static const int kQelScaleFieldNumber = 10;
  inline const ::std::string& qel_scale() const;
  inline void set_qel_scale(const ::std::string& value);
  inline void set_qel_scale(const char* value);
  inline void set_qel_scale(const void* value, size_t size);
  inline ::std::string* mutable_qel_scale();
  inline ::std::string* release_qel_scale();
  inline void set_allocated_qel_scale(::std::string* qel_scale);

  // optional bytes qel_ratio = 11;
  inline bool has_qel_ratio() const;
  inline void clear_qel_ratio();
  static const int kQelRatioFieldNumber = 11;
  inline const ::std::string& qel_ratio() const;
  inline void set_qel_ratio(const ::std::string& value);
  inline void set_qel_ratio(const char* value);
  inline void set_qel_ratio(const void* value, size_t size);
  inline ::std::string* mutable_qel_ratio();
  inline ::std::string* release_qel_ratio();
  inline void set_allocated_qel_ratio(::std::string* qel_ratio);

  // optional bytes qel_angle = 12;
  inline bool has_qel_angle() const;
  inline void clear_qel_angle();
  static const int kQelAngleFieldNumber = 12;
  inline const ::std::string& qel_angle() const;
  inline void set_qel_angle(const ::std::string& value);
  inline void set_qel_angle(const char* value);
  inline void set_qel_angle(const void* value, size_t size);
  inline ::std::string* mutable_qel_angle();
  inline ::std::string* release_qel_angle();
  inline void set_allocated_qel_angle(::std::string* qel_angle);

  // repeated uint32 count = 13 [packed = true];
  inline int count_size() const;
  inline void clear_count();
  static const int kCountFieldNumber = 13;
  inline ::google::protobuf::uint32 count(int index) const;
  inline void set_count(int index, ::google::protobuf::uint32 value);
  inline void add_count(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      count() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_count();

  // repeated float weight = 14 [packed = true];
  inline int weight_size() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 14;
  inline float weight(int index) const;
  inline void set_weight(int index, float value);
  inline void add_weight(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      weight() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_weight();

  // optional bytes data = 15;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 15;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // repeated bool keep = 16 [packed = true];
  inline int keep_size() const;
  inline void clear_keep();
  static const int kKeepFieldNumber = 16;
  inline bool keep(int index) const;
  inline void set_keep(int index, bool value);
  inline void add_keep(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      keep() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_keep();

  // repeated uint32 docid = 51 [packed = true];
  inline int docid_size() const;
  inline void clear_docid();
  static const int kDocidFieldNumber = 51;
  inline ::google::protobuf::uint32 docid(int index) const;
  inline void set_docid(int index, ::google::protobuf::uint32 value);
  inline void add_docid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      docid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_docid();

  // @@protoc_insertion_point(class_scope:rr.indexEntry)
 private:
  inline void set_has_qel_scale();
  inline void clear_has_qel_scale();
  inline void set_has_qel_ratio();
  inline void clear_has_qel_ratio();
  inline void set_has_qel_angle();
  inline void clear_has_qel_angle();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;
  mutable int _id_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > diffid_;
  mutable int _diffid_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > x_;
  mutable int _x_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > y_;
  mutable int _y_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > a_;
  mutable int _a_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > b_;
  mutable int _b_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > c_;
  mutable int _c_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > qx_;
  mutable int _qx_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > qy_;
  mutable int _qy_cached_byte_size_;
  ::std::string* qel_scale_;
  ::std::string* qel_ratio_;
  ::std::string* qel_angle_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > count_;
  mutable int _count_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > weight_;
  mutable int _weight_cached_byte_size_;
  ::std::string* data_;
  ::google::protobuf::RepeatedField< bool > keep_;
  mutable int _keep_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > docid_;
  mutable int _docid_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_index_5fentry_2eproto();
  friend void protobuf_AssignDesc_index_5fentry_2eproto();
  friend void protobuf_ShutdownFile_index_5fentry_2eproto();

  void InitAsDefaultInstance();
  static indexEntry* default_instance_;
};
// ===================================================================


// ===================================================================

// indexEntry

// repeated uint32 id = 1 [packed = true];
inline int indexEntry::id_size() const {
  return id_.size();
}
inline void indexEntry::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 indexEntry::id(int index) const {
  return id_.Get(index);
}
inline void indexEntry::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
}
inline void indexEntry::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
indexEntry::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
indexEntry::mutable_id() {
  return &id_;
}

// repeated uint32 diffid = 2 [packed = true];
inline int indexEntry::diffid_size() const {
  return diffid_.size();
}
inline void indexEntry::clear_diffid() {
  diffid_.Clear();
}
inline ::google::protobuf::uint32 indexEntry::diffid(int index) const {
  return diffid_.Get(index);
}
inline void indexEntry::set_diffid(int index, ::google::protobuf::uint32 value) {
  diffid_.Set(index, value);
}
inline void indexEntry::add_diffid(::google::protobuf::uint32 value) {
  diffid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
indexEntry::diffid() const {
  return diffid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
indexEntry::mutable_diffid() {
  return &diffid_;
}

// repeated float x = 3 [packed = true];
inline int indexEntry::x_size() const {
  return x_.size();
}
inline void indexEntry::clear_x() {
  x_.Clear();
}
inline float indexEntry::x(int index) const {
  return x_.Get(index);
}
inline void indexEntry::set_x(int index, float value) {
  x_.Set(index, value);
}
inline void indexEntry::add_x(float value) {
  x_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
indexEntry::x() const {
  return x_;
}
inline ::google::protobuf::RepeatedField< float >*
indexEntry::mutable_x() {
  return &x_;
}

// repeated float y = 4 [packed = true];
inline int indexEntry::y_size() const {
  return y_.size();
}
inline void indexEntry::clear_y() {
  y_.Clear();
}
inline float indexEntry::y(int index) const {
  return y_.Get(index);
}
inline void indexEntry::set_y(int index, float value) {
  y_.Set(index, value);
}
inline void indexEntry::add_y(float value) {
  y_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
indexEntry::y() const {
  return y_;
}
inline ::google::protobuf::RepeatedField< float >*
indexEntry::mutable_y() {
  return &y_;
}

// repeated float a = 5 [packed = true];
inline int indexEntry::a_size() const {
  return a_.size();
}
inline void indexEntry::clear_a() {
  a_.Clear();
}
inline float indexEntry::a(int index) const {
  return a_.Get(index);
}
inline void indexEntry::set_a(int index, float value) {
  a_.Set(index, value);
}
inline void indexEntry::add_a(float value) {
  a_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
indexEntry::a() const {
  return a_;
}
inline ::google::protobuf::RepeatedField< float >*
indexEntry::mutable_a() {
  return &a_;
}

// repeated float b = 6 [packed = true];
inline int indexEntry::b_size() const {
  return b_.size();
}
inline void indexEntry::clear_b() {
  b_.Clear();
}
inline float indexEntry::b(int index) const {
  return b_.Get(index);
}
inline void indexEntry::set_b(int index, float value) {
  b_.Set(index, value);
}
inline void indexEntry::add_b(float value) {
  b_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
indexEntry::b() const {
  return b_;
}
inline ::google::protobuf::RepeatedField< float >*
indexEntry::mutable_b() {
  return &b_;
}

// repeated float c = 7 [packed = true];
inline int indexEntry::c_size() const {
  return c_.size();
}
inline void indexEntry::clear_c() {
  c_.Clear();
}
inline float indexEntry::c(int index) const {
  return c_.Get(index);
}
inline void indexEntry::set_c(int index, float value) {
  c_.Set(index, value);
}
inline void indexEntry::add_c(float value) {
  c_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
indexEntry::c() const {
  return c_;
}
inline ::google::protobuf::RepeatedField< float >*
indexEntry::mutable_c() {
  return &c_;
}

// repeated uint32 qx = 8 [packed = true];
inline int indexEntry::qx_size() const {
  return qx_.size();
}
inline void indexEntry::clear_qx() {
  qx_.Clear();
}
inline ::google::protobuf::uint32 indexEntry::qx(int index) const {
  return qx_.Get(index);
}
inline void indexEntry::set_qx(int index, ::google::protobuf::uint32 value) {
  qx_.Set(index, value);
}
inline void indexEntry::add_qx(::google::protobuf::uint32 value) {
  qx_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
indexEntry::qx() const {
  return qx_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
indexEntry::mutable_qx() {
  return &qx_;
}

// repeated uint32 qy = 9 [packed = true];
inline int indexEntry::qy_size() const {
  return qy_.size();
}
inline void indexEntry::clear_qy() {
  qy_.Clear();
}
inline ::google::protobuf::uint32 indexEntry::qy(int index) const {
  return qy_.Get(index);
}
inline void indexEntry::set_qy(int index, ::google::protobuf::uint32 value) {
  qy_.Set(index, value);
}
inline void indexEntry::add_qy(::google::protobuf::uint32 value) {
  qy_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
indexEntry::qy() const {
  return qy_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
indexEntry::mutable_qy() {
  return &qy_;
}

// optional bytes qel_scale = 10;
inline bool indexEntry::has_qel_scale() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void indexEntry::set_has_qel_scale() {
  _has_bits_[0] |= 0x00000200u;
}
inline void indexEntry::clear_has_qel_scale() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void indexEntry::clear_qel_scale() {
  if (qel_scale_ != &::google::protobuf::internal::kEmptyString) {
    qel_scale_->clear();
  }
  clear_has_qel_scale();
}
inline const ::std::string& indexEntry::qel_scale() const {
  return *qel_scale_;
}
inline void indexEntry::set_qel_scale(const ::std::string& value) {
  set_has_qel_scale();
  if (qel_scale_ == &::google::protobuf::internal::kEmptyString) {
    qel_scale_ = new ::std::string;
  }
  qel_scale_->assign(value);
}
inline void indexEntry::set_qel_scale(const char* value) {
  set_has_qel_scale();
  if (qel_scale_ == &::google::protobuf::internal::kEmptyString) {
    qel_scale_ = new ::std::string;
  }
  qel_scale_->assign(value);
}
inline void indexEntry::set_qel_scale(const void* value, size_t size) {
  set_has_qel_scale();
  if (qel_scale_ == &::google::protobuf::internal::kEmptyString) {
    qel_scale_ = new ::std::string;
  }
  qel_scale_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* indexEntry::mutable_qel_scale() {
  set_has_qel_scale();
  if (qel_scale_ == &::google::protobuf::internal::kEmptyString) {
    qel_scale_ = new ::std::string;
  }
  return qel_scale_;
}
inline ::std::string* indexEntry::release_qel_scale() {
  clear_has_qel_scale();
  if (qel_scale_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qel_scale_;
    qel_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void indexEntry::set_allocated_qel_scale(::std::string* qel_scale) {
  if (qel_scale_ != &::google::protobuf::internal::kEmptyString) {
    delete qel_scale_;
  }
  if (qel_scale) {
    set_has_qel_scale();
    qel_scale_ = qel_scale;
  } else {
    clear_has_qel_scale();
    qel_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes qel_ratio = 11;
inline bool indexEntry::has_qel_ratio() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void indexEntry::set_has_qel_ratio() {
  _has_bits_[0] |= 0x00000400u;
}
inline void indexEntry::clear_has_qel_ratio() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void indexEntry::clear_qel_ratio() {
  if (qel_ratio_ != &::google::protobuf::internal::kEmptyString) {
    qel_ratio_->clear();
  }
  clear_has_qel_ratio();
}
inline const ::std::string& indexEntry::qel_ratio() const {
  return *qel_ratio_;
}
inline void indexEntry::set_qel_ratio(const ::std::string& value) {
  set_has_qel_ratio();
  if (qel_ratio_ == &::google::protobuf::internal::kEmptyString) {
    qel_ratio_ = new ::std::string;
  }
  qel_ratio_->assign(value);
}
inline void indexEntry::set_qel_ratio(const char* value) {
  set_has_qel_ratio();
  if (qel_ratio_ == &::google::protobuf::internal::kEmptyString) {
    qel_ratio_ = new ::std::string;
  }
  qel_ratio_->assign(value);
}
inline void indexEntry::set_qel_ratio(const void* value, size_t size) {
  set_has_qel_ratio();
  if (qel_ratio_ == &::google::protobuf::internal::kEmptyString) {
    qel_ratio_ = new ::std::string;
  }
  qel_ratio_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* indexEntry::mutable_qel_ratio() {
  set_has_qel_ratio();
  if (qel_ratio_ == &::google::protobuf::internal::kEmptyString) {
    qel_ratio_ = new ::std::string;
  }
  return qel_ratio_;
}
inline ::std::string* indexEntry::release_qel_ratio() {
  clear_has_qel_ratio();
  if (qel_ratio_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qel_ratio_;
    qel_ratio_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void indexEntry::set_allocated_qel_ratio(::std::string* qel_ratio) {
  if (qel_ratio_ != &::google::protobuf::internal::kEmptyString) {
    delete qel_ratio_;
  }
  if (qel_ratio) {
    set_has_qel_ratio();
    qel_ratio_ = qel_ratio;
  } else {
    clear_has_qel_ratio();
    qel_ratio_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes qel_angle = 12;
inline bool indexEntry::has_qel_angle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void indexEntry::set_has_qel_angle() {
  _has_bits_[0] |= 0x00000800u;
}
inline void indexEntry::clear_has_qel_angle() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void indexEntry::clear_qel_angle() {
  if (qel_angle_ != &::google::protobuf::internal::kEmptyString) {
    qel_angle_->clear();
  }
  clear_has_qel_angle();
}
inline const ::std::string& indexEntry::qel_angle() const {
  return *qel_angle_;
}
inline void indexEntry::set_qel_angle(const ::std::string& value) {
  set_has_qel_angle();
  if (qel_angle_ == &::google::protobuf::internal::kEmptyString) {
    qel_angle_ = new ::std::string;
  }
  qel_angle_->assign(value);
}
inline void indexEntry::set_qel_angle(const char* value) {
  set_has_qel_angle();
  if (qel_angle_ == &::google::protobuf::internal::kEmptyString) {
    qel_angle_ = new ::std::string;
  }
  qel_angle_->assign(value);
}
inline void indexEntry::set_qel_angle(const void* value, size_t size) {
  set_has_qel_angle();
  if (qel_angle_ == &::google::protobuf::internal::kEmptyString) {
    qel_angle_ = new ::std::string;
  }
  qel_angle_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* indexEntry::mutable_qel_angle() {
  set_has_qel_angle();
  if (qel_angle_ == &::google::protobuf::internal::kEmptyString) {
    qel_angle_ = new ::std::string;
  }
  return qel_angle_;
}
inline ::std::string* indexEntry::release_qel_angle() {
  clear_has_qel_angle();
  if (qel_angle_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qel_angle_;
    qel_angle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void indexEntry::set_allocated_qel_angle(::std::string* qel_angle) {
  if (qel_angle_ != &::google::protobuf::internal::kEmptyString) {
    delete qel_angle_;
  }
  if (qel_angle) {
    set_has_qel_angle();
    qel_angle_ = qel_angle;
  } else {
    clear_has_qel_angle();
    qel_angle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint32 count = 13 [packed = true];
inline int indexEntry::count_size() const {
  return count_.size();
}
inline void indexEntry::clear_count() {
  count_.Clear();
}
inline ::google::protobuf::uint32 indexEntry::count(int index) const {
  return count_.Get(index);
}
inline void indexEntry::set_count(int index, ::google::protobuf::uint32 value) {
  count_.Set(index, value);
}
inline void indexEntry::add_count(::google::protobuf::uint32 value) {
  count_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
indexEntry::count() const {
  return count_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
indexEntry::mutable_count() {
  return &count_;
}

// repeated float weight = 14 [packed = true];
inline int indexEntry::weight_size() const {
  return weight_.size();
}
inline void indexEntry::clear_weight() {
  weight_.Clear();
}
inline float indexEntry::weight(int index) const {
  return weight_.Get(index);
}
inline void indexEntry::set_weight(int index, float value) {
  weight_.Set(index, value);
}
inline void indexEntry::add_weight(float value) {
  weight_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
indexEntry::weight() const {
  return weight_;
}
inline ::google::protobuf::RepeatedField< float >*
indexEntry::mutable_weight() {
  return &weight_;
}

// optional bytes data = 15;
inline bool indexEntry::has_data() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void indexEntry::set_has_data() {
  _has_bits_[0] |= 0x00004000u;
}
inline void indexEntry::clear_has_data() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void indexEntry::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& indexEntry::data() const {
  return *data_;
}
inline void indexEntry::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void indexEntry::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void indexEntry::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* indexEntry::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* indexEntry::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void indexEntry::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated bool keep = 16 [packed = true];
inline int indexEntry::keep_size() const {
  return keep_.size();
}
inline void indexEntry::clear_keep() {
  keep_.Clear();
}
inline bool indexEntry::keep(int index) const {
  return keep_.Get(index);
}
inline void indexEntry::set_keep(int index, bool value) {
  keep_.Set(index, value);
}
inline void indexEntry::add_keep(bool value) {
  keep_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
indexEntry::keep() const {
  return keep_;
}
inline ::google::protobuf::RepeatedField< bool >*
indexEntry::mutable_keep() {
  return &keep_;
}

// repeated uint32 docid = 51 [packed = true];
inline int indexEntry::docid_size() const {
  return docid_.size();
}
inline void indexEntry::clear_docid() {
  docid_.Clear();
}
inline ::google::protobuf::uint32 indexEntry::docid(int index) const {
  return docid_.Get(index);
}
inline void indexEntry::set_docid(int index, ::google::protobuf::uint32 value) {
  docid_.Set(index, value);
}
inline void indexEntry::add_docid(::google::protobuf::uint32 value) {
  docid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
indexEntry::docid() const {
  return docid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
indexEntry::mutable_docid() {
  return &docid_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rr

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_index_5fentry_2eproto__INCLUDED
