// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: index_entry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "index_entry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rr {

namespace {

const ::google::protobuf::Descriptor* indexEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  indexEntry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_index_5fentry_2eproto() {
  protobuf_AddDesc_index_5fentry_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "index_entry.proto");
  GOOGLE_CHECK(file != NULL);
  indexEntry_descriptor_ = file->message_type(0);
  static const int indexEntry_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexEntry, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexEntry, diffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexEntry, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexEntry, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexEntry, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexEntry, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexEntry, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexEntry, qx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexEntry, qy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexEntry, qel_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexEntry, qel_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexEntry, qel_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexEntry, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexEntry, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexEntry, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexEntry, keep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexEntry, docid_),
  };
  indexEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      indexEntry_descriptor_,
      indexEntry::default_instance_,
      indexEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(indexEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(indexEntry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_index_5fentry_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    indexEntry_descriptor_, &indexEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_index_5fentry_2eproto() {
  delete indexEntry::default_instance_;
  delete indexEntry_reflection_;
}

void protobuf_AddDesc_index_5fentry_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021index_entry.proto\022\002rr\"\256\002\n\nindexEntry\022\016"
    "\n\002id\030\001 \003(\rB\002\020\001\022\022\n\006diffid\030\002 \003(\rB\002\020\001\022\r\n\001x\030"
    "\003 \003(\002B\002\020\001\022\r\n\001y\030\004 \003(\002B\002\020\001\022\r\n\001a\030\005 \003(\002B\002\020\001\022"
    "\r\n\001b\030\006 \003(\002B\002\020\001\022\r\n\001c\030\007 \003(\002B\002\020\001\022\016\n\002qx\030\010 \003("
    "\rB\002\020\001\022\016\n\002qy\030\t \003(\rB\002\020\001\022\021\n\tqel_scale\030\n \001(\014"
    "\022\021\n\tqel_ratio\030\013 \001(\014\022\021\n\tqel_angle\030\014 \001(\014\022\021"
    "\n\005count\030\r \003(\rB\002\020\001\022\022\n\006weight\030\016 \003(\002B\002\020\001\022\014\n"
    "\004data\030\017 \001(\014\022\020\n\004keep\030\020 \003(\010B\002\020\001\022\021\n\005docid\0303"
    " \003(\rB\002\020\001B\002H\001", 332);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "index_entry.proto", &protobuf_RegisterTypes);
  indexEntry::default_instance_ = new indexEntry();
  indexEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_index_5fentry_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_index_5fentry_2eproto {
  StaticDescriptorInitializer_index_5fentry_2eproto() {
    protobuf_AddDesc_index_5fentry_2eproto();
  }
} static_descriptor_initializer_index_5fentry_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int indexEntry::kIdFieldNumber;
const int indexEntry::kDiffidFieldNumber;
const int indexEntry::kXFieldNumber;
const int indexEntry::kYFieldNumber;
const int indexEntry::kAFieldNumber;
const int indexEntry::kBFieldNumber;
const int indexEntry::kCFieldNumber;
const int indexEntry::kQxFieldNumber;
const int indexEntry::kQyFieldNumber;
const int indexEntry::kQelScaleFieldNumber;
const int indexEntry::kQelRatioFieldNumber;
const int indexEntry::kQelAngleFieldNumber;
const int indexEntry::kCountFieldNumber;
const int indexEntry::kWeightFieldNumber;
const int indexEntry::kDataFieldNumber;
const int indexEntry::kKeepFieldNumber;
const int indexEntry::kDocidFieldNumber;
#endif  // !_MSC_VER

indexEntry::indexEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void indexEntry::InitAsDefaultInstance() {
}

indexEntry::indexEntry(const indexEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void indexEntry::SharedCtor() {
  _cached_size_ = 0;
  qel_scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qel_ratio_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qel_angle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

indexEntry::~indexEntry() {
  SharedDtor();
}

void indexEntry::SharedDtor() {
  if (qel_scale_ != &::google::protobuf::internal::kEmptyString) {
    delete qel_scale_;
  }
  if (qel_ratio_ != &::google::protobuf::internal::kEmptyString) {
    delete qel_ratio_;
  }
  if (qel_angle_ != &::google::protobuf::internal::kEmptyString) {
    delete qel_angle_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void indexEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* indexEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return indexEntry_descriptor_;
}

const indexEntry& indexEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_index_5fentry_2eproto();
  return *default_instance_;
}

indexEntry* indexEntry::default_instance_ = NULL;

indexEntry* indexEntry::New() const {
  return new indexEntry;
}

void indexEntry::Clear() {
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_qel_scale()) {
      if (qel_scale_ != &::google::protobuf::internal::kEmptyString) {
        qel_scale_->clear();
      }
    }
    if (has_qel_ratio()) {
      if (qel_ratio_ != &::google::protobuf::internal::kEmptyString) {
        qel_ratio_->clear();
      }
    }
    if (has_qel_angle()) {
      if (qel_angle_ != &::google::protobuf::internal::kEmptyString) {
        qel_angle_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  id_.Clear();
  diffid_.Clear();
  x_.Clear();
  y_.Clear();
  a_.Clear();
  b_.Clear();
  c_.Clear();
  qx_.Clear();
  qy_.Clear();
  count_.Clear();
  weight_.Clear();
  keep_.Clear();
  docid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool indexEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 id = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_diffid;
        break;
      }

      // repeated uint32 diffid = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diffid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_diffid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_diffid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_x;
        break;
      }

      // repeated float x = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_x())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_x())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_y;
        break;
      }

      // repeated float y = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_y())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34, input, this->mutable_y())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_a;
        break;
      }

      // repeated float a = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_a())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42, input, this->mutable_a())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_b;
        break;
      }

      // repeated float b = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_b())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50, input, this->mutable_b())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_c;
        break;
      }

      // repeated float c = 7 [packed = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_c())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 58, input, this->mutable_c())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_qx;
        break;
      }

      // repeated uint32 qx = 8 [packed = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_qx())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66, input, this->mutable_qx())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_qy;
        break;
      }

      // repeated uint32 qy = 9 [packed = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_qy())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 74, input, this->mutable_qy())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_qel_scale;
        break;
      }

      // optional bytes qel_scale = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qel_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qel_scale()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_qel_ratio;
        break;
      }

      // optional bytes qel_ratio = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qel_ratio:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qel_ratio()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_qel_angle;
        break;
      }

      // optional bytes qel_angle = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qel_angle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qel_angle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_count;
        break;
      }

      // repeated uint32 count = 13 [packed = true];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_count())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 106, input, this->mutable_count())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_weight;
        break;
      }

      // repeated float weight = 14 [packed = true];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weight())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 114, input, this->mutable_weight())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_data;
        break;
      }

      // optional bytes data = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_keep;
        break;
      }

      // repeated bool keep = 16 [packed = true];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_keep())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 130, input, this->mutable_keep())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_docid;
        break;
      }

      // repeated uint32 docid = 51 [packed = true];
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_docid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_docid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 410, input, this->mutable_docid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void indexEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 id = 1 [packed = true];
  if (this->id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_id_cached_byte_size_);
  }
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->id(i), output);
  }

  // repeated uint32 diffid = 2 [packed = true];
  if (this->diffid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_diffid_cached_byte_size_);
  }
  for (int i = 0; i < this->diffid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->diffid(i), output);
  }

  // repeated float x = 3 [packed = true];
  if (this->x_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_x_cached_byte_size_);
  }
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->x(i), output);
  }

  // repeated float y = 4 [packed = true];
  if (this->y_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_y_cached_byte_size_);
  }
  for (int i = 0; i < this->y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->y(i), output);
  }

  // repeated float a = 5 [packed = true];
  if (this->a_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_a_cached_byte_size_);
  }
  for (int i = 0; i < this->a_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->a(i), output);
  }

  // repeated float b = 6 [packed = true];
  if (this->b_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_b_cached_byte_size_);
  }
  for (int i = 0; i < this->b_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->b(i), output);
  }

  // repeated float c = 7 [packed = true];
  if (this->c_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_c_cached_byte_size_);
  }
  for (int i = 0; i < this->c_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->c(i), output);
  }

  // repeated uint32 qx = 8 [packed = true];
  if (this->qx_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_qx_cached_byte_size_);
  }
  for (int i = 0; i < this->qx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->qx(i), output);
  }

  // repeated uint32 qy = 9 [packed = true];
  if (this->qy_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_qy_cached_byte_size_);
  }
  for (int i = 0; i < this->qy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->qy(i), output);
  }

  // optional bytes qel_scale = 10;
  if (has_qel_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->qel_scale(), output);
  }

  // optional bytes qel_ratio = 11;
  if (has_qel_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->qel_ratio(), output);
  }

  // optional bytes qel_angle = 12;
  if (has_qel_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->qel_angle(), output);
  }

  // repeated uint32 count = 13 [packed = true];
  if (this->count_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_count_cached_byte_size_);
  }
  for (int i = 0; i < this->count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->count(i), output);
  }

  // repeated float weight = 14 [packed = true];
  if (this->weight_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_weight_cached_byte_size_);
  }
  for (int i = 0; i < this->weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->weight(i), output);
  }

  // optional bytes data = 15;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      15, this->data(), output);
  }

  // repeated bool keep = 16 [packed = true];
  if (this->keep_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(16, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_keep_cached_byte_size_);
  }
  for (int i = 0; i < this->keep_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBoolNoTag(
      this->keep(i), output);
  }

  // repeated uint32 docid = 51 [packed = true];
  if (this->docid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(51, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_docid_cached_byte_size_);
  }
  for (int i = 0; i < this->docid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->docid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* indexEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 id = 1 [packed = true];
  if (this->id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->id(i), target);
  }

  // repeated uint32 diffid = 2 [packed = true];
  if (this->diffid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _diffid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->diffid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->diffid(i), target);
  }

  // repeated float x = 3 [packed = true];
  if (this->x_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _x_cached_byte_size_, target);
  }
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->x(i), target);
  }

  // repeated float y = 4 [packed = true];
  if (this->y_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _y_cached_byte_size_, target);
  }
  for (int i = 0; i < this->y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->y(i), target);
  }

  // repeated float a = 5 [packed = true];
  if (this->a_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _a_cached_byte_size_, target);
  }
  for (int i = 0; i < this->a_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->a(i), target);
  }

  // repeated float b = 6 [packed = true];
  if (this->b_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _b_cached_byte_size_, target);
  }
  for (int i = 0; i < this->b_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->b(i), target);
  }

  // repeated float c = 7 [packed = true];
  if (this->c_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _c_cached_byte_size_, target);
  }
  for (int i = 0; i < this->c_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->c(i), target);
  }

  // repeated uint32 qx = 8 [packed = true];
  if (this->qx_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _qx_cached_byte_size_, target);
  }
  for (int i = 0; i < this->qx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->qx(i), target);
  }

  // repeated uint32 qy = 9 [packed = true];
  if (this->qy_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _qy_cached_byte_size_, target);
  }
  for (int i = 0; i < this->qy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->qy(i), target);
  }

  // optional bytes qel_scale = 10;
  if (has_qel_scale()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->qel_scale(), target);
  }

  // optional bytes qel_ratio = 11;
  if (has_qel_ratio()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->qel_ratio(), target);
  }

  // optional bytes qel_angle = 12;
  if (has_qel_angle()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->qel_angle(), target);
  }

  // repeated uint32 count = 13 [packed = true];
  if (this->count_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _count_cached_byte_size_, target);
  }
  for (int i = 0; i < this->count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->count(i), target);
  }

  // repeated float weight = 14 [packed = true];
  if (this->weight_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _weight_cached_byte_size_, target);
  }
  for (int i = 0; i < this->weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->weight(i), target);
  }

  // optional bytes data = 15;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        15, this->data(), target);
  }

  // repeated bool keep = 16 [packed = true];
  if (this->keep_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      16,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _keep_cached_byte_size_, target);
  }
  for (int i = 0; i < this->keep_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->keep(i), target);
  }

  // repeated uint32 docid = 51 [packed = true];
  if (this->docid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      51,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _docid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->docid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->docid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int indexEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bytes qel_scale = 10;
    if (has_qel_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qel_scale());
    }

    // optional bytes qel_ratio = 11;
    if (has_qel_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qel_ratio());
    }

    // optional bytes qel_angle = 12;
    if (has_qel_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qel_angle());
    }

    // optional bytes data = 15;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  // repeated uint32 id = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 diffid = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->diffid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->diffid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _diffid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float x = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->x_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _x_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float y = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->y_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _y_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float a = 5 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->a_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _a_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float b = 6 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->b_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _b_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float c = 7 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->c_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _c_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 qx = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->qx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->qx(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _qx_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 qy = 9 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->qy_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->qy(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _qy_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 count = 13 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->count_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->count(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _count_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float weight = 14 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->weight_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _weight_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool keep = 16 [packed = true];
  {
    int data_size = 0;
    data_size = 1 * this->keep_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _keep_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 docid = 51 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->docid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->docid(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _docid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void indexEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const indexEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const indexEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void indexEntry::MergeFrom(const indexEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  diffid_.MergeFrom(from.diffid_);
  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  a_.MergeFrom(from.a_);
  b_.MergeFrom(from.b_);
  c_.MergeFrom(from.c_);
  qx_.MergeFrom(from.qx_);
  qy_.MergeFrom(from.qy_);
  count_.MergeFrom(from.count_);
  weight_.MergeFrom(from.weight_);
  keep_.MergeFrom(from.keep_);
  docid_.MergeFrom(from.docid_);
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_qel_scale()) {
      set_qel_scale(from.qel_scale());
    }
    if (from.has_qel_ratio()) {
      set_qel_ratio(from.qel_ratio());
    }
    if (from.has_qel_angle()) {
      set_qel_angle(from.qel_angle());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void indexEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void indexEntry::CopyFrom(const indexEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool indexEntry::IsInitialized() const {

  return true;
}

void indexEntry::Swap(indexEntry* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    diffid_.Swap(&other->diffid_);
    x_.Swap(&other->x_);
    y_.Swap(&other->y_);
    a_.Swap(&other->a_);
    b_.Swap(&other->b_);
    c_.Swap(&other->c_);
    qx_.Swap(&other->qx_);
    qy_.Swap(&other->qy_);
    std::swap(qel_scale_, other->qel_scale_);
    std::swap(qel_ratio_, other->qel_ratio_);
    std::swap(qel_angle_, other->qel_angle_);
    count_.Swap(&other->count_);
    weight_.Swap(&other->weight_);
    std::swap(data_, other->data_);
    keep_.Swap(&other->keep_);
    docid_.Swap(&other->docid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata indexEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = indexEntry_descriptor_;
  metadata.reflection = indexEntry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rr

// @@protoc_insertion_point(global_scope)
